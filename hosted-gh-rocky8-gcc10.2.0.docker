FROM rockylinux/rockylinux:8.10
ENV container docker

# dependencies
RUN yum -y install epel-release
RUN yum -y group install "Development Tools"
RUN yum -y install redhat-lsb wget gmp-devel mpfr-devel libmpc-devel gnupg wget

# custom gcc
ENV GCC_NAME gcc-10.2.0

RUN wget https://ftp.gnu.org/gnu/gcc/$GCC_NAME/$GCC_NAME.tar.gz.sig
RUN wget https://ftp.gnu.org/gnu/gnu-keyring.gpg
RUN gpg --import gnu-keyring.gpg | true

RUN wget https://ftp.gnu.org/gnu/gcc/$GCC_NAME/$GCC_NAME.tar.gz && \
    gpg --verify $GCC_NAME.tar.gz.sig $GCC_NAME.tar.gz && \
    tar xzf $GCC_NAME.tar.gz && \
    rm $GCC_NAME.tar.gz && \
    cd $GCC_NAME && \
    mkdir release && \
    cd release && \
    ../configure --prefix=/opt/$GCC_NAME --disable-libstdcxx-visibility \
                 --disable-multilib --enable-languages=c,c++ \
                 --with-default-libstdcxx-abi=gcc4-compatible && \
    make bootstrap -j 17 && \
    make install && cd .. && cd .. && rm -rf $GCC_NAME

ENV CXX /opt/$GCC_NAME/bin/c++
ENV CC /opt/$GCC_NAME/bin/gcc

# dependencies
RUN yum -y remove git && \
    yum -y remove git-* && \
    yum install dnf-plugins-core && \
    yum config-manager --set-enabled powertools && \
    yum -y install https://packages.endpointdev.com/rhel/8/main/x86_64/endpoint-repo.noarch.rpm && \
    yum install -y git \
    curl autoconf automake pkgconfig graphviz doxygen libstdc++-static \
    wget git python3.11-devel zlib-devel python3.11 rpm-build python3.11-pip

RUN ln -s /usr/lib64/pkgconfig/python-3.11-embed.pc /usr/lib64/pkgconfig/python3-embed.pc && \
    ln -s /usr/lib64/pkgconfig/python-3.11.pc /usr/lib64/pkgconfig/python3.pc

RUN python3 -m pip install --upgrade pip && \
    pip3 install sphinx pkgconfig mypy Cython wheel faker boto3 cibuildwheel==2.8.1 twine packaging==21.3 \
    breathe sphinx_rtd_theme mistune==0.8.4 m2r sphinx-autodoc-typehints

RUN mkdir /actions-runner && cd /actions-runner && \
    curl -o actions-runner-linux-x64-2.296.2.tar.gz -L https://github.com/actions/runner/releases/download/v2.296.2/actions-runner-linux-x64-2.296.2.tar.gz && \
    tar xzf ./actions-runner-linux-x64-2.296.2.tar.gz && \
    ./bin/installdependencies.sh && \
    rm -f /actions-runner/actions-runner-linux-x64-2.296.2.tar.gz

RUN cd /tmp && \
    wget --no-check-certificate https://capnproto.org/capnproto-c++-0.9.0.tar.gz && \
    tar zxf capnproto-c++-0.9.0.tar.gz && \
    cd capnproto-c++-0.9.0 && \
    ./configure --with-pic --enable-shared=no --prefix=/usr --libdir=/usr/lib64 && \
    make -j8 && make install && cd /tmp && \
    rm -rf /tmp/capnproto-c++-0.9.0 /tmp/capnproto-c++-0.9.0.tar.gz && \
    LDFLAGS="-static-libstdc++ -static-libgcc" pip3 install pycapnp --no-cache-dir

RUN cd /tmp && \
    wget https://github.com/Kitware/CMake/releases/download/v3.21.0/cmake-3.21.0-linux-x86_64.tar.gz && \
    tar xvzf cmake-3.21.0-linux-x86_64.tar.gz && \
    cp /tmp/cmake-3.21.0-linux-x86_64/bin/* /usr/bin/ && \
    cp -r /tmp/cmake-3.21.0-linux-x86_64/share/* /usr/share/ && \
    rm -rf /tmp/cmake-3.21.0-linux-x86_64 /tmp/cmake-3.21.0-linux-x86_64.tar.gz

RUN cd /tmp && \
    git clone --depth 1 https://github.com/google/googletest.git -b release-1.11.0 && \
    cd googletest && mkdir build && cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/usr .. && \
    make -j8 && make install && \
    rm -rf /tmp/googletest

RUN cd /tmp && \
    git clone --depth 1 -b v1.2.3 https://github.com/mirror/tclap.git tclap-code && \
    cd tclap-code && \
    ./autotools.sh && \
    ./configure --prefix=/usr --libdir=/usr/lib64 && \
    make -j8 && make install && \
    rm -rf /tmp/tclap-code

RUN yum -y install epel-release && \
    yum -y install dnf && \
    dnf -y install 'dnf-command(config-manager)' && \
    dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo && \
    dnf -y --nogpgcheck install gh

RUN cd /tmp && \
    wget https://www.openssl.org/source/openssl-1.1.1q.tar.gz --no-check-certificate && \
    tar xzf openssl-1.1.1q.tar.gz && \
    cd openssl-1.1.1q && \
    ./config no-shared && \
    make -j8 && make install && \
    rm -rf /tmp/openssl-1.1.1q /tmp/openssl-1.1.1q.tar.gz

#The GIT_TOKEN is the self-hosted token, not the users token
CMD cd /actions-runner && \
    ./config.sh --url ${GIT_REPO} --token ${GIT_TOKEN} --labels ${RUNNER_LABEL} --name ${RUNNER_NAME} --ephemeral --unattended && \
    ./run.sh
