FROM --platform=linux/amd64 ubuntu:20.04
ENV container docker
ENV DEBIAN_FRONTEND "noninteractive"

# dependencies

RUN apt-get update -y
RUN apt-get upgrade -y
RUN apt-get install -y build-essential
RUN apt-get install -y wget libgmp-dev libmpfr-dev libmpc-dev
RUN apt-get -y install clang 
RUN apt-get -y install cmake
RUN apt-get -y install doxygen
RUN apt-get -y install graphviz
RUN apt-get -y install pkg-config
RUN apt-get -y install libstdc++-10-dev
RUN apt-get -y install libunwind-dev
RUN apt-get -y install curl rpm
RUN apt-get -y install zlib1g-dev libbz2-dev openssl libssl-dev libsqlite3-dev
RUN apt-get -y install libdw-dev libpcap-dev liblz4-dev libcurl4
RUN apt-get -y install libarchive-dev
RUN apt-get -y install libevent-dev
RUN apt-get -y install git
RUN apt-get -y install autoconf automake pkg-config 
RUN apt-get -y install lsb-release

# custom gcc
ENV GCC_NAME gcc-10.2.0

RUN wget https://ftp.gnu.org/gnu/gcc/$GCC_NAME/$GCC_NAME.tar.gz.sig
RUN wget https://ftp.gnu.org/gnu/gnu-keyring.gpg
RUN gpg --import gnu-keyring.gpg | true

RUN wget https://ftp.gnu.org/gnu/gcc/$GCC_NAME/$GCC_NAME.tar.gz && \
    gpg --verify $GCC_NAME.tar.gz.sig $GCC_NAME.tar.gz && \
    tar xzf $GCC_NAME.tar.gz && \
    rm $GCC_NAME.tar.gz && \
    cd $GCC_NAME && \
    mkdir release && \
    cd release && \
    ../configure --prefix=/opt/$GCC_NAME --disable-libstdcxx-visibility \
                 --disable-multilib --enable-languages=c,c++ \
                 --with-default-libstdcxx-abi=gcc4-compatible && \
    make bootstrap -j 17 && \
    make install && cd .. && cd .. && rm -rf $GCC_NAME

ENV CXX /opt/$GCC_NAME/bin/c++
ENV CC /opt/$GCC_NAME/bin/gcc


RUN wget -c https://www.python.org/ftp/python/3.8.12/Python-3.8.12.tar.xz && \
    tar -xvf Python-3.8.12.tar.xz && \
    cd Python-3.8.12 && \
    ./configure --enable-optimizations --enable-shared && \ 
    make install && \
    update-alternatives --install /usr/bin/python python /usr/local/bin/python3.8 1 && \
    update-alternatives --install /usr/bin/pip pip /usr/local/bin/pip3.8 1 && \
    cd .. && \ 
    rm -rf Python-3.8.12

RUN echo /usr/local/lib >> /etc/ld.so.conf.d/usr-local.conf
RUN ldconfig
RUN python --version
RUN pip install numpy==1.19.2
RUN pip install setuptools wheel cython 
RUN pip install pycapnp
RUN pip install awscli msgpack==0.6.2
RUN pip install psutil==5.8.0
RUN pip install mypy==0.790 
RUN pip install boto3==1.13.11
RUN pip install pandas==1.2.0 pytz
RUN pip3 install pkgconfig faker boto3 cibuildwheel==2.8.1 twine packaging==21.3

RUN mkdir /actions-runner && cd /actions-runner && \
    curl -o actions-runner-linux-x64-2.296.2.tar.gz -L https://github.com/actions/runner/releases/download/v2.296.2/actions-runner-linux-x64-2.296.2.tar.gz && \
    tar xzf ./actions-runner-linux-x64-2.296.2.tar.gz && \
    ./bin/installdependencies.sh && \
    rm -f /actions-runner/actions-runner-linux-x64-2.296.2.tar.gz

RUN cd /tmp && \
    wget --no-check-certificate https://capnproto.org/capnproto-c++-0.9.0.tar.gz && \
    tar zxf capnproto-c++-0.9.0.tar.gz && \
    cd capnproto-c++-0.9.0 && \
    ./configure --with-pic --enable-shared=no --prefix=/usr --libdir=/usr/lib64 && \
    make -j8 && make install && cd /tmp && \
    rm -rf /tmp/capnproto-c++-0.9.0 /tmp/capnproto-c++-0.9.0.tar.gz && \
    LDFLAGS="-static-libstdc++ -static-libgcc" pip3 install pycapnp --no-cache-dir

RUN cd /tmp && \
    wget https://github.com/Kitware/CMake/releases/download/v3.21.0/cmake-3.21.0-linux-x86_64.tar.gz && \
    tar xvzf cmake-3.21.0-linux-x86_64.tar.gz && \
    cp /tmp/cmake-3.21.0-linux-x86_64/bin/* /usr/bin/ && \
    cp -r /tmp/cmake-3.21.0-linux-x86_64/share/* /usr/share/ && \
    rm -rf /tmp/cmake-3.21.0-linux-x86_64 /tmp/cmake-3.21.0-linux-x86_64.tar.gz

RUN cd /tmp && \
    git clone --depth 1 https://github.com/google/googletest.git -b release-1.11.0 && \
    cd googletest && mkdir build && cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/usr .. && \
    make -j8 && make install && \
    rm -rf /tmp/googletest

RUN cd /tmp && \
    git clone --depth 1 -b v1.2.3 https://github.com/mirror/tclap.git tclap-code && \
    cd tclap-code && \
    ./autotools.sh && \
    ./configure --prefix=/usr --libdir=/usr/lib64 && \
    make -j8 && make install && \
    rm -rf /tmp/tclap-code

RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
    && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    && apt update \
    && apt install gh -y

RUN cd /tmp && \
    wget https://www.openssl.org/source/openssl-1.1.1q.tar.gz --no-check-certificate && \
    tar xzf openssl-1.1.1q.tar.gz && \
    cd openssl-1.1.1q && \
    ./config no-shared && \
    make -j8 && make install && \
    rm -rf /tmp/openssl-1.1.1q /tmp/openssl-1.1.1q.tar.gz

#The GIT_TOKEN is the self-hosted token, not the users token
CMD cd /actions-runner && \
    ./config.sh --url ${GIT_REPO} --token ${GIT_TOKEN} --labels ${RUNNER_LABEL} --name ${RUNNER_NAME} --ephemeral --unattended && \
    ./run.sh
