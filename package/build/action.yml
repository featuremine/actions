# COPYRIGHT (c) 2019-2023 by Featuremine Corporation.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

name: 'Build package action'
description: 'Build with CMake, test with ctest and upload to github releases'
inputs:
  gh_token:
    description: 'Github token used to upload documentation'
    required: true
  git_credentials_url:
    description: 'Github credentials URL with user and token to clone other private repositories'
    required: false
    default: ''
  build_type:
    description: 'Customize the CMake build type (Release, Debug, RelWithDebInfo, etc.)'
    required: false
    default: 'Release'
  jobs:
    description: '-j option to pass to Cmake'
    required: false
    default: 2
  cpack:
    description: 'package type for cpack (RPM or DEB)'
    required: false
    default: ''
  docs:
    description: 'Build and upload docs'
    type: boolean
    required: false
    default: false
  wheel:
    description: 'Build and upload the wheel'
    type: boolean
    required: false
    default: true
  extra_options:
    description: 'Build extra options'
    required: false
    default: ''
  upload:
    description: 'Upload package and docs to github release'
    type: boolean
    required: false
    default: false
  test_pypi_token:
    description: 'Test Pypi token used to test the publish release'
    required: false
    default: ''
runs:
  using: 'composite'
  steps:
  - uses: de-vri-es/setup-git-credentials@v2.0.10
    if: ${{ inputs.git_credentials_url != '' }}
    with:
      credentials: ${{ inputs.git_credentials_url }}

  - name: Install Python requirements
    run: for REQ in $(find . -name "*requirements*.txt" 2>/dev/null); do python3 -m pip install -r ${REQ}; done
    shell: bash

  - name: Install build requirements
    if: inputs.docs == 'true'
    run: |
      LC_CTYPE=en_US.UTF-8 LANG=en_US.UTF-8 python3 -m pip install pandoc==2.3
      curl -L https://github.com/jgm/pandoc/releases/download/2.19.2/pandoc-2.19.2-linux-amd64.tar.gz --output "$RUNNER_TEMP/pandoc-2.19.2.tar.gz" || exit 1
      tar xvzf "$RUNNER_TEMP/pandoc-2.19.2.tar.gz" -C "$RUNNER_TEMP"
      rm "$RUNNER_TEMP/pandoc-2.19.2.tar.gz"
      echo "$RUNNER_TEMP/pandoc-2.19.2/bin" >> $GITHUB_PATH
    shell: bash

  - name: Configure ${{ github.event.repository.name }} CMake
    env:
      GH_TOKEN: ${{ inputs.gh_token }}
    run: >
      cmake -B ${{github.workspace}}/build
      -DBUILD_TESTING=ON
      -DBUILD_WHEEL=$(if [[ ${{ inputs.wheel }} == 'true' ]]; then echo ON; else echo OFF; fi)
      -DBUILD_API_DOCS=$(if [[ ${{ inputs.docs }} == 'true' ]]; then echo ON; else echo OFF; fi)
      -DBUILD_DOCUMENTATION=$(if [[ ${{ inputs.docs }} == 'true' ]]; then echo ON; else echo OFF; fi)
      -DBUILD_DOCUMENTATION_FORCE=$(if [[ ${{ inputs.docs }} == 'true' ]]; then echo ON; else echo OFF; fi)
      -DCMAKE_BUILD_TYPE=${{ inputs.build_type }}
      -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1
      ${{ inputs.extra_options }}
    shell: bash
    
  - name: Build ${{ github.event.repository.name }}
    env:
      GH_TOKEN: ${{ inputs.gh_token }}
    run: cmake --build ${{github.workspace}}/build --config ${{ inputs.build_type }} -- -j${{ inputs.jobs }}
    shell: bash

  - name: Test ${{ github.event.repository.name }} with ctest
    env:
      GH_TOKEN: ${{ inputs.gh_token }}
    run: cd ${{github.workspace}}/build && ctest --extra-verbose -C ${{ inputs.build_type }}
    shell: bash

  - name: Fix permissions for repository directory
    if: inputs.upload == 'true'
    run: git config --global --add safe.directory /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}
    shell: bash

  - name: Install twine
    if: inputs.test_pypi_token != '' && inputs.upload == 'true'
    run: pip3 install twine
    shell: bash

  - name: Publish to testpypi
    if: inputs.test_pypi_token != '' && inputs.upload == 'true'
    run: twine upload --skip-existing -r testpypi -u __token__ -p ${{ inputs.test_pypi_token }} ${{github.workspace}}/build/output/*.whl
    shell: bash

  - name: Build system package ${{ inputs.cpack }}
    if: inputs.cpack != '' && inputs.upload == 'true'
    run: cd ${{github.workspace}}/build && cpack -G ${{ inputs.cpack }}
    shell: bash
  
  - uses: nick-fields/retry@v2
    name: Upload system package ${{ inputs.cpack }}
    if: inputs.cpack != '' && inputs.upload == 'true'
    env: 
      GH_TOKEN: ${{ inputs.gh_token }}
    with:
      timeout_minutes: 5
      max_attempts: 5
      retry_wait_seconds: 1
      command: >
        for PKG in $(ls ${{github.workspace}}/build/${{ github.event.repository.name }}-$(cat VERSION)-$(uname -s)-$(uname -m).tar.gz
                        ${{github.workspace}}/build/${{ github.event.repository.name }}-$(cat VERSION)-$(uname -s)-$(uname -m).deb
                        ${{github.workspace}}/build/${{ github.event.repository.name }}-$(cat VERSION)-$(uname -s)-$(uname -m).rpm 2>/dev/null);
          do gh release upload v$(cat VERSION) ${PKG} --clobber || exit 1;
        done; 

  - uses: nick-fields/retry@v2
    name: Upload sh package
    if: inputs.upload == 'true'
    env:
      GH_TOKEN: ${{ inputs.gh_token }}
    with:
      timeout_minutes: 5
      max_attempts: 5
      retry_wait_seconds: 1
      command: >
        for PKG in $(ls ${{github.workspace}}/build/output/*.sh ${{github.workspace}}/build/output/*-html.tar.gz ${{github.workspace}}/build/output/*-md.tar.gz 2>/dev/null);
          do gh release upload v$(cat VERSION) ${PKG} --clobber || exit 1;
        done; 

  - uses: nick-fields/retry@v2
    name: Upload wheel package
    if: inputs.wheel == 'true' && inputs.upload == 'true'
    env:
      GH_TOKEN: ${{ inputs.gh_token }}
    with:
      timeout_minutes: 5
      max_attempts: 5
      retry_wait_seconds: 1
      command: >
        for PKG in $(ls ${{github.workspace}}/build/output/*.whl 2>/dev/null);
          do gh release upload v$(cat VERSION) ${PKG} --clobber || exit 1;
        done;
