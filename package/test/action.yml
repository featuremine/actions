# COPYRIGHT (c) 2019-2023 by Featuremine Corporation.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

name: 'Test package action'
description: 'Download a package from github releases and test it'
inputs:
  gh_token:
    description: 'Github token used to download releases'
    required: true
  git_credentials_url:
    description: 'Github credentials URL with user and token to clone other private repositories'
    required: false
    default: ''
  yamal_version:
    description: 'Version of yamal to download and install in the system (e.g. 7.2.18)'
    required: false
    default: ''
  build_type:
    description: 'Customize the CMake build type (Release, Debug, RelWithDebInfo, etc.)'
    required: false
    default: 'Release'
  jobs:
    description: '-j option to pass to Cmake'
    required: false
    default: 2
  sudo:
    description: 'need sudo to install packages on root directories'
    required: false
    default: false
  test_script:
    description: 'the test script name to run'
    required: false
    default: ''
runs:
  using: 'composite'    
  steps:
  - name: Set sudo prefix
    run: echo "SUDO_PREFIX=$(if ${{ inputs.sudo }}; then echo "sudo "; else echo ""; fi;)" >> $GITHUB_ENV
    shell: bash

  - name: Fix permissions for repository directory
    run: git config --global --add safe.directory /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}
    shell: bash

  - uses: de-vri-es/setup-git-credentials@v2
    if: ${{ inputs.git_credentials_url != '' }}
    with:
      credentials: ${{ inputs.git_credentials_url }}

  - name: Download license
    if: ${{ inputs.git_credentials_url != '' }}
    working-directory: /tmp
    run: |
      git clone --depth 1 https://github.com/featuremine/license
    shell: bash

  - uses: actions/checkout@v3.5.3
    with: 
      fetch-depth: 0

  - name: Install Python requirements
    run: for REQ in $(find . -name "*requirements*.txt" 2>/dev/null); do python3 -m pip install -r ${REQ}; done
    shell: bash

  - uses: nick-fields/retry@v2
    name: Download packages from github release
    env:
      GH_TOKEN: ${{ inputs.gh_token }}
    with:
      timeout_minutes: 5
      max_attempts: 5
      retry_wait_seconds: 1
      command: gh release download v$(cat VERSION) -D /tmp/packages && chmod -R u=rwx /tmp/packages

  - name: Build and install yamal for testing
    if: ${{ inputs.yamal_version != '' }}
    working-directory: /tmp
    run: |
      git clone --recurse-submodules --depth 1 -b v${{ inputs.yamal_version }} https://github.com/featuremine/yamal.git
      cd yamal
      for REQ in $(find . -name "*requirements*.txt" 2>/dev/null); do python3 -m pip install -r ${REQ}; done
      cmake -B $PWD/build -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DBUILD_SHARED_LIBS=OFF -DBUILD_API_DOCS=OFF -DBUILD_DOCUMENTATION=OFF -DBUILD_TESTING=OFF -DBUILD_WHEEL=ON
      cd build && make -j${{ inputs.jobs }} && ${SUDO_PREFIX}make install
      if [[ $OSTYPE =~ "darwin" ]]; then mv output/*.whl "$(echo output/*.whl | sed s/[0-9][0-9]_0/10_9/)"; fi;
      pip3 install output/*.whl --verbose
    shell: bash

  - name: Install ${{ github.event.repository.name }} fm gcc package
    run: >
      for PKG in $(ls /tmp/packages/*-$(uname -s)-$(uname -m).sh 2>/dev/null);
        do ${SUDO_PREFIX}${PKG};
      done;
      for PKG in $(ls /tmp/packages/*-$(uname -s)-$(uname -m).tar.gz  2>/dev/null);
        do ${SUDO_PREFIX}tar xvzfk ${PKG} -C /usr/$(if [[ $OSTYPE =~ "linux" ]]; then echo ""; elif [[ $OSTYPE =~ "darwin" ]]; then echo local; fi);
      done;
    shell: bash

  - name: Patch ${{ github.event.repository.name }} wheel
    run: >
      for PKG in $(ls /tmp/packages/*-$(if [[ $OSTYPE =~ "linux" ]]; then echo manylinux; elif [[ $OSTYPE =~ "darwin" ]]; then echo macosx; fi)*$(uname -m)*.whl 2>/dev/null);
        do if [[ $OSTYPE =~ "darwin" ]]; then mv "$PKG" "$(echo "$PKG" | sed s/11_0/10_9/)"; fi;
      done
    shell: bash

  - name: Install ${{ github.event.repository.name }} wheel
    run: >
      for PKG in $(ls /tmp/packages/*-$(if [[ $OSTYPE =~ "linux" ]]; then echo manylinux; elif [[ $OSTYPE =~ "darwin" ]]; then echo macosx; fi)*$(uname -m)*.whl 2>/dev/null);
        do pip3 install ${PKG} --verbose;
      done;
      for PKG in $(ls /tmp/packages/*-py3-none-any.whl 2>/dev/null);
        do pip3 install ${PKG} --verbose;
      done;
    shell: bash

  - name: Run ${{ github.event.repository.name }} Python package tests
    if: ${{ inputs.test_script != '' }}
    env:
      LICENSE_PATH: /tmp/license/test.lic
    run: ${{ inputs.test_script }}
    shell: bash

  - name: Run ${{ github.event.repository.name }} Python package tests
    if: ${{ inputs.test_script == '' }}
    env:
      LICENSE_PATH: /tmp/license/test.lic
    run: >
      for DIR in $(echo "$PATH" | tr : " ");
        do for TEST in $(ls $DIR/test-${{ github.event.repository.name }}* 2>/dev/null);
          do $TEST;
        done;
      done;
    shell: bash
